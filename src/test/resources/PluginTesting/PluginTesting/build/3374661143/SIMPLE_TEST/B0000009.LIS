               #include "C:/Users/vaprti/vector/sandbox/large_vcm/regression/release/Tutorial/cpp/cpptypes.h"
               #include "C:/Users/vaprti/vector/sandbox/large_vcm/regression/release/Tutorial/cpp/database.h"
               #include "C:/Users/vaprti/vector/sandbox/large_vcm/regression/release/Tutorial/cpp/manager.h"
               Manager::Manager(){
1 0     ( )    Manager::Manager
1 1              WaitingListSize = 0;
1 2              WaitingListIndex = 0;
               }
               /* This function will add a free dessert to specific orders based on the
                  entree, salad, and beverage choice */
               void Manager::AddIncludedDessert(OrderType* Order)
               {
2 0     ( )    Manager::AddIncludedDessert
2 1     ( )( )   if(!
2 1.1   ( )( )   Order)
2 2                return;
2 3     ( )( )   if(
2 3.1   ( )( )   Order->Entree == Steak &&
2 3.2   ( )( )   Order->Salad == Caesar &&
2 3.3   ( )( )   Order->Beverage == MixedDrink) {
2 4                Order->Dessert = Pies;
                 } else 
2 5     ( )( )     if(
2 5.1   ( )( )     Order->Entree == Lobster &&
2 5.2   ( )( )     Order->Salad == Green &&
2 5.3   ( )( )     Order->Beverage == Wine) {
2 6                  Order->Dessert = Cake;
                 }
               }
               void Manager::PlaceOrder(unsigned int Table, unsigned int Seat, OrderType Order)
               {
3 0     ( )    Manager::PlaceOrder
3 1              TableDataType TableData;
3 2              Data.DeleteTableRecord(&TableData);
3 3              Data.GetTableRecord(Table, &TableData);
3 4              TableData.IsOccupied = true;
3 5              TableData.NumberInParty++;
3 6              TableData.Order[Seat] = Order;
                 /* Add a free dessert in some case */
3 7              AddIncludedDessert(&TableData.Order[Seat]);
3 8              switch(Order.Entree) {
3 9     ( )        case Steak :
3 10                 TableData.CheckTotal += 14;
3 11                 break;
3 12    ( )        case Chicken :
3 13                 TableData.CheckTotal += 10;
3 14                 break;
3 15    ( )        case Lobster :
3 16                 TableData.CheckTotal += 18;
3 17                 break;
3 18    ( )        case Pasta :
3 19                 TableData.CheckTotal += 12;
3 20                 break;
3 21    ( )        default :
3 22                 break;
                 }
3 23             Data.UpdateTableRecord(Table, &TableData);
               }
               void Manager::ClearTable(unsigned int Table)
               {
4 0     ( )    Manager::ClearTable
4 1              Data.DeleteRecord(Table);
               }
               int Manager::GetCheckTotal(unsigned int Table)
               {
5 0     ( )    Manager::GetCheckTotal
5 1              TableDataType TableData;
5 2              Data.DeleteTableRecord(&TableData);
5 3              Data.GetTableRecord(Table, &TableData);
5 4              return TableData.CheckTotal;
               }
               void Manager::AddPartyToWaitingList(char* Name)
               {
6 0     ( )    Manager::AddPartyToWaitingList
6 1              int i = 0;
6 2     ( )( )   if(
6 2.1   ( )( )   WaitingListSize > 9)
6 3                WaitingListSize = 0;
6 4     ( )( )   while(
6 4.1   ( )( )   Name && 
6 4.2   ( )( )   *Name) {
6 5                WaitingList[WaitingListSize][i++] = *Name;
6 6                Name++;
                 }
6 7              WaitingList[WaitingListSize++][i] = 0;
               }
               char* Manager::GetNextPartyToBeSeated()
               {
7 0     ( )    Manager::GetNextPartyToBeSeated
7 1     ( )( )   if(
7 1.1   ( )( )   WaitingListIndex > 9)
7 2                WaitingListIndex = 0;
7 3              return WaitingList[WaitingListIndex++];
               }
